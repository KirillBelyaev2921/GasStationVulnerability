package bieliaiev.dss.gas_station.service;

import bieliaiev.dss.gas_station.model.feature.Feature;
import bieliaiev.dss.gas_station.model.feature.FeatureGroup;
import bieliaiev.dss.gas_station.model.weight.FeatureWeight;
import bieliaiev.dss.gas_station.model.weight.Scenario;
import bieliaiev.dss.gas_station.repository.weight.ScenarioRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureWebMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@AutoConfigureWebMvc
@SpringBootTest
class WeightServiceTest {

    @Autowired
    private WeightService service;

    @MockBean
    private ScenarioRepository repository;

    private static final List<Feature> features = List.of(
            new Feature(new FeatureGroup("E", "E"), 1, "Feature1"),
            new Feature(new FeatureGroup("S", "S"), 1, "Feature2"),
            new Feature(new FeatureGroup("A", "A"), 1, "Feature3"));

    @BeforeEach
    void setUp() {
        when(repository.findAll()).thenReturn(List.of(
                new Scenario("Scenario1", List.of(
                        new FeatureWeight(features.get(0), 0.4),
                        new FeatureWeight(features.get(1), 0.4),
                        new FeatureWeight(features.get(2), 0.2))),
                new Scenario("Scenario2", List.of(
                        new FeatureWeight(features.get(0), 0.3),
                        new FeatureWeight(features.get(1), 0.3),
                        new FeatureWeight(features.get(2), 0.4)))
        ));
    }

    @Test
    void getListOfScenarioFeatureWeights() {
        List<Map<String, Double>> result = service.getListOfScenarioFeatureWeights();

        assertThat(result).isNotNull();
        assertThat(result.size()).isEqualTo(2);
        assertThat(result.get(0).get("E1")).isEqualTo(0.4);
        assertThat(result.get(0).get("S1")).isEqualTo(0.4);
        assertThat(result.get(0).get("A1")).isEqualTo(0.2);
        assertThat(result.get(1).get("E1")).isEqualTo(0.3);
        assertThat(result.get(1).get("S1")).isEqualTo(0.3);
        assertThat(result.get(1).get("A1")).isEqualTo(0.4);
    }
}
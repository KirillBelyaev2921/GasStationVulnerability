package bieliaiev.dss.gas_station;

import bieliaiev.dss.gas_station.model.choice.FeatureSelectQuestion;
import bieliaiev.dss.gas_station.model.choice.FeatureSelectOption;
import bieliaiev.dss.gas_station.model.feature.Feature;
import bieliaiev.dss.gas_station.model.feature.FeatureGroup;
import bieliaiev.dss.gas_station.model.interpretation.MemberFunction;
import bieliaiev.dss.gas_station.model.weight.FeatureWeight;
import bieliaiev.dss.gas_station.model.weight.Scenario;
import bieliaiev.dss.gas_station.repository.choice.FeatureSelectQuestionRepository;
import bieliaiev.dss.gas_station.repository.feature.FeatureGroupRepository;
import bieliaiev.dss.gas_station.repository.feature.FeatureRepository;
import bieliaiev.dss.gas_station.repository.interpretation.MemberFunctionRepository;
import bieliaiev.dss.gas_station.repository.weight.ScenarioRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

@SpringBootApplication
public class GasStationVulnerabilityApplication {

    public static void main(String[] args) {
        SpringApplication.run(GasStationVulnerabilityApplication.class, args);
    }

    @Bean
    public CommandLineRunner commandLineRunner(FeatureGroupRepository repository,
                                               FeatureRepository featureRepository,
                                               FeatureSelectQuestionRepository choiceRepository,
                                               ScenarioRepository scenarioRepository,
                                               MemberFunctionRepository functionRepository) {
        return args -> {
            FeatureGroup economicGroup = new FeatureGroup("E", "Economic");
            FeatureGroup socialGroup = new FeatureGroup("S", "Social");
            FeatureGroup environmentalGroup = new FeatureGroup("A", "Environmental");

            economicGroup.setFeatures(List.of(
                    new Feature("тип конструкції АЗС і використовуваного обладнання"),
                    new Feature("число резервуарів, їх об’єм та тип "),
                    new Feature("наявність поряд із АЗС підприємств, що надають додаткові послуги автомобілістам: СТО, автомийок, магазинів, закладів громадського харчування"),
                    new Feature("наявність поряд із АЗС комунікацій комунального господарства"),
                    new Feature("наявність поблизу АЗС підприємств-об’єктів підвищеної небезпеки"),
                    new Feature("наявність поблизу АЗС житлової забудови")));
            socialGroup.setFeatures(List.of(
                    new Feature("щільність населення в районі поблизу АЗС"),
                    new Feature("характер зони, в якій перебуває АЗС: житлової забудови, промислова, сільськогосподарська, рекреаційна тощо"),
                    new Feature("наявність поблизу АЗС соціально важливої інфраструктури: стадіони, школи, лікарні і т.п."),
                    new Feature("знаходження в зоні бойових дій або близькість до цієї зони"),
                    new Feature("кваліфікація персоналу")));
            environmentalGroup.setFeatures(List.of(
                    new Feature("тип використовуваного палива, стандарт"),
                    new Feature("погодні умови"),
                    new Feature("наявність поблизу АЗС значних лісових масивів"),
                    new Feature("наявність поблизу АЗС земель с/г значення (орних земель, пасовищ тощо)"),
                    new Feature("характер рельєфу біля АЗС"),
                    new Feature("наявність поблизу АЗС рекреаційних зон (як великих, там і малих)")));

            repository.saveAll(List.of(economicGroup, socialGroup, environmentalGroup));

            List<FeatureSelectQuestion> choices = new ArrayList<>(17);
            choices.add(new FeatureSelectQuestion("Оберіть тип конструкції АЗС",
                    1, economicGroup.getFeatures().get(0),
                    List.of(new FeatureSelectOption("З наземними резервуарами", 1.0),
                            new FeatureSelectOption("З підземними резервуарами", 0.5))
            ));
            choices.add(new FeatureSelectQuestion("Введіть кількість паливнороздавальних колонок на АЗС",
                    1, economicGroup.getFeatures().get(1),
                    IntStream.range(1, 11).mapToObj(i ->
                                    new FeatureSelectOption(i < 10 ? Integer.toString(i) : "10+", i / 10.0))
                            .toList()
            ));
            choices.add(new FeatureSelectQuestion("Оберіть кількість підприємств поряд із АЗС, що надають додаткові послуги автомобілістам: СТО, автомийок, магазинів, закладів громадського харчування ",
                    1, economicGroup.getFeatures().get(2),
                    List.of(new FeatureSelectOption("0-50м (1 або більше)", 1.0),
                            new FeatureSelectOption("50-100м (3 або більше)", 1.0),
                            new FeatureSelectOption("50-100м (1 або 2)", 0.7),
                            new FeatureSelectOption("100-200м", 0.3),
                            new FeatureSelectOption("200+м", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть відстань до магістральних водо- і газопроводів, тепломереж, мереж зв’язку або ліній електропередач",
                    1, economicGroup.getFeatures().get(3),
                    List.of(new FeatureSelectOption("0-50м (1 або більше)", 1.0),
                            new FeatureSelectOption("50-100м", 0.5),
                            new FeatureSelectOption("100-200м", 0.2),
                            new FeatureSelectOption("200+м", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть відстань до найближчого к АЗС небезпечного об'єкту",
                    1, economicGroup.getFeatures().get(4),
                    List.of(new FeatureSelectOption("0-50м (1 або більше)", 1.0),
                            new FeatureSelectOption("50-100м (2 або більше)", 1.0),
                            new FeatureSelectOption("50-100м (1 об'єкт)", 0.7),
                            new FeatureSelectOption("100+м (3 або більше)", 0.7),
                            new FeatureSelectOption("100-200м", 0.3),
                            new FeatureSelectOption("200+м", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть відстань до найближчої к АЗС житлової забудови",
                    1, economicGroup.getFeatures().get(5),
                    List.of(new FeatureSelectOption("0-100м (щільна забудова, високоповерхівки)", 1.0),
                            new FeatureSelectOption("0-100м (приватні будинки, нещільна забудова)", 0.7),
                            new FeatureSelectOption("100-200м", 0.3),
                            new FeatureSelectOption("200+м", 0.0))
            ));

            choices.add(new FeatureSelectQuestion("Оберіть щільність населення в районі поблизу АЗС",
                    1, socialGroup.getFeatures().get(0),
                    List.of(new FeatureSelectOption("Висока", 1.0),
                            new FeatureSelectOption("Середня", 0.7),
                            new FeatureSelectOption("Низька", 0.3),
                            new FeatureSelectOption("Дуже низька", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть характер зони, в якій перебуває АЗС",
                    1, socialGroup.getFeatures().get(1),
                    List.of(new FeatureSelectOption("Житлова або рекреаційна зона", 1.0),
                            new FeatureSelectOption("Промислова зона", 0.7),
                            new FeatureSelectOption("Сільськогосподарська", 0.3),
                            new FeatureSelectOption("Маловикористовувані землі, малонаселені", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть відстань до соціально важливої інфраструктури поблизу АЗС: стадіони, школи, лікарні і т.п.",
                    1, socialGroup.getFeatures().get(2),
                    List.of(new FeatureSelectOption("0-50м (1 або більше)", 1.0),
                            new FeatureSelectOption("50-100м (2 або більше)", 1.0),
                            new FeatureSelectOption("50-100м (1 об'єкт)", 0.7),
                            new FeatureSelectOption("100+м (3 або більше)", 0.7),
                            new FeatureSelectOption("100-200м", 0.3),
                            new FeatureSelectOption("200+м", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть, чи знаходжиться АЗС в зоні бойових дій або чи близька вона до цієї зони",
                    1, socialGroup.getFeatures().get(3),
                    List.of(new FeatureSelectOption("В межах активних бойових дій", 1.0),
                            new FeatureSelectOption("Прифронтові зони та регіони", 0.7),
                            new FeatureSelectOption("За межами прифронтових зон, але в країні відбуваються військові дії", 0.3),
                            new FeatureSelectOption("В країні немає військових дій", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберість тип АЗС",
                    1, socialGroup.getFeatures().get(4),
                    List.of(new FeatureSelectOption("Мала, приватна АЗС або така, що належить до маловідомої торговельної мережі", 0.75),
                            new FeatureSelectOption("АЗС належить до відомої торговельної мережі", 0.3))
            ));

            choices.add(new FeatureSelectQuestion("Оберіть кількість типів використовуваного палива (не включаючи газ)",
                    1, environmentalGroup.getFeatures().get(0),
                    IntStream.range(0, 8).mapToObj(i ->
                                    new FeatureSelectOption(i < 7 ? Integer.toString(i) : "7+", i / 10.0))
                            .toList()
            ));
            choices.add(new FeatureSelectQuestion("Оберіть, чи поставляється Газ на АЗС",
                    2, environmentalGroup.getFeatures().get(0),
                    List.of(new FeatureSelectOption("Так", 0.3),
                            new FeatureSelectOption("Ні", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть клімат у регіоні",
                    1, environmentalGroup.getFeatures().get(1),
                    List.of(new FeatureSelectOption("Жаркий, тропічний клімат", 1.0),
                            new FeatureSelectOption("Помірний клімат", 0.6),
                            new FeatureSelectOption("Холодний клімат", 0.2))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть відстань до значних лісових масивів біля АЗС",
                    1, environmentalGroup.getFeatures().get(2),
                    List.of(new FeatureSelectOption("0-50м (1 або більше)", 1.0),
                            new FeatureSelectOption("50-100м", 0.7),
                            new FeatureSelectOption("100-200м", 0.3),
                            new FeatureSelectOption("200+м", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть відстань до земель с/г значення біля АЗС",
                    1, environmentalGroup.getFeatures().get(3),
                    List.of(new FeatureSelectOption("0-50м (1 або більше)", 1.0),
                            new FeatureSelectOption("50-100м", 0.7),
                            new FeatureSelectOption("100-200м", 0.3),
                            new FeatureSelectOption("200+м", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть характер рельєфу біля АЗС ",
                    1, environmentalGroup.getFeatures().get(4),
                    List.of(new FeatureSelectOption("АЗС знаходиться на пагорбі відносно прилеглої місцевості", 1.0),
                            new FeatureSelectOption("АЗС на рівнинній місцевості", 0.7),
                            new FeatureSelectOption("АЗС оточена підвищеннями з 2-3 сторін", 0.3),
                            new FeatureSelectOption("АЗС знаходиться у пониззі, у котловані", 0.0))
            ));
            choices.add(new FeatureSelectQuestion("Оберіть відстань до рекреаційних зон поблизу",
                    1, environmentalGroup.getFeatures().get(5),
                    List.of(new FeatureSelectOption("0-50м (1 або більше)", 1.0),
                            new FeatureSelectOption("50-100м", 0.7),
                            new FeatureSelectOption("100-200м", 0.3),
                            new FeatureSelectOption("200+м", 0.0))
            ));

            choiceRepository.saveAll(choices);


            List<Feature> allFeatures = featureRepository.findAll();
            List<Double> wave = List.of(0.073, 0.122, 0.069, 0.069, 0.116, 0.106, 0.056, 0.024, 0.048, 0.029, 0.027, 0.061, 0.0, 0.058, 0.0, 0.07, 0.073);
            List<Double> fire = List.of(0.098, 0.125, 0.0, 0.0, 0.138, 0.103, 0.042, 0.038, 0.052, 0.038, 0.042, 0.058, 0.058, 0.094, 0.055, 0.058, 0.073);
            List<Double> ball = List.of(0.082, 0.153, 0.0, 0.074, 0.109, 0.105, 0.053, 0.03, 0.055, 0.032, 0.032, 0.062, 0.056, 0.092, 0.0, 0.0, 0.065);

            List<Scenario> scenarios = new ArrayList<>(3);
            scenarios.add(new Scenario("Ударна хвиля",
                    IntStream.range(0, 17)
                            .mapToObj(i -> new FeatureWeight(allFeatures.get(i), wave.get(i)))
                            .toList()));
            scenarios.add(new Scenario("Пожежа проливу нафтопродуктів",
                    IntStream.range(0, 17)
                            .mapToObj(i -> new FeatureWeight(allFeatures.get(i), fire.get(i)))
                            .toList()));
            scenarios.add(new Scenario("\"Вогняна куля\"",
                    IntStream.range(0, 17)
                            .mapToObj(i -> new FeatureWeight(allFeatures.get(i), ball.get(i)))
                            .toList()));

            scenarioRepository.saveAll(scenarios);

            List<MemberFunction> functions = List.of(
                    new MemberFunction(0.0, 0.0, 0.3, 0.4, "«низька вразливість» означає, що у разі ймовірного виникнення аварійного інциденту на оціненій АЗС масштаби небажаних наслідків (економічних, соціальних та екологічних) можуть бути невисокими і задовольняють певному допустимому рівню.", "«низька вразливість»"),
                    new MemberFunction(0.3, 0.4, 0.6, 0.7, "«середня вразливість» означає, що у разі ймовірного виникнення аварійного інциденту на оціненій АЗС масштаби небажаних наслідків (економічних, соціальних та екологічних) можуть бути більшими за середній рівень і можуть слугувати підставою для проведення експертизи оціненої АЗС на предмет дотримання всіх необхідних регламентів контролюючими органами і вжиття необхідних заходів.", "«середня вразливість»"),
                    new MemberFunction(0.6, 0.7, 1.0, 1.0, "«висока вразливість» означає, що у разі ймовірного виникнення аварійного інциденту на оціненій АЗС масштаби небажаних наслідків (економічних, соціальних та екологічних) можуть бути великими, тобто такими, що можуть спричинити значний вплив і у цьому випадку перевірка оціненої АЗС на предмет дотримання всіх необхідних регламентів контролюючими органами рекомендована для вжиття заходів щодо зменшення загроз чи закриття ПНО.", "«висока вразливість»")
                    );

            functionRepository.saveAll(functions);
        };
    }
}

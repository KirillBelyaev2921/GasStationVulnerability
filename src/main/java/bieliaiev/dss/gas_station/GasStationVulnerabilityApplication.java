package bieliaiev.dss.gas_station;

import bieliaiev.dss.gas_station.model.choice.FeatureChoice;
import bieliaiev.dss.gas_station.model.choice.FeatureOption;
import bieliaiev.dss.gas_station.model.feature.Feature;
import bieliaiev.dss.gas_station.model.feature.FeatureGroup;
import bieliaiev.dss.gas_station.model.weight.FeatureWeight;
import bieliaiev.dss.gas_station.model.weight.Scenario;
import bieliaiev.dss.gas_station.repository.choice.FeatureChoiceRepository;
import bieliaiev.dss.gas_station.repository.feature.FeatureGroupRepository;
import bieliaiev.dss.gas_station.repository.feature.FeatureRepository;
import bieliaiev.dss.gas_station.repository.weight.ScenarioRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

@SpringBootApplication
public class GasStationVulnerabilityApplication {

    public static void main(String[] args) {
        SpringApplication.run(GasStationVulnerabilityApplication.class, args);
    }

    @Bean
    public CommandLineRunner commandLineRunner(FeatureGroupRepository repository,
                                               FeatureRepository featureRepository,
                                               FeatureChoiceRepository choiceRepository,
                                               ScenarioRepository scenarioRepository) {
        return args -> {
            FeatureGroup economicGroup = new FeatureGroup("E", "Economic");
            FeatureGroup socialGroup = new FeatureGroup("S", "Social");
            FeatureGroup environmentalGroup = new FeatureGroup("A", "Environmental");

            economicGroup.setFeatures(List.of(
                    new Feature("тип конструкції АЗС і використовуваного обладнання"),
                    new Feature("число резервуарів, їх об’єм та тип "),
                    new Feature("наявність поряд із АЗС підприємств, що надають додаткові послуги автомобілістам: СТО, автомийок, магазинів, закладів громадського харчування"),
                    new Feature("наявність поряд із АЗС комунікацій комунального господарства"),
                    new Feature("наявність поблизу АЗС підприємств-об’єктів підвищеної небезпеки"),
                    new Feature("наявність поблизу АЗС житлової забудови")));
            socialGroup.setFeatures(List.of(
                    new Feature("щільність населення в районі поблизу АЗС"),
                    new Feature("характер зони, в якій перебуває АЗС: житлової забудови, промислова, сільськогосподарська, рекреаційна тощо"),
                    new Feature("наявність поблизу АЗС соціально важливої інфраструктури: стадіони, школи, лікарні і т.п."),
                    new Feature("знаходження в зоні бойових дій або близькість до цієї зони"),
                    new Feature("кваліфікація персоналу")));
            environmentalGroup.setFeatures(List.of(
                    new Feature("тип використовуваного палива, стандарт"),
                    new Feature("погодні умови"),
                    new Feature("наявність поблизу АЗС значних лісових масивів"),
                    new Feature("наявність поблизу АЗС земель с/г значення (орних земель, пасовищ тощо)"),
                    new Feature("характер рельєфу біля АЗС"),
                    new Feature("наявність поблизу АЗС рекреаційних зон (як великих, там і малих)")));

            repository.saveAll(List.of(economicGroup, socialGroup, environmentalGroup));

            List<FeatureChoice> choices = new ArrayList<>(17);
            choices.add(new FeatureChoice("Оберіть тип конструкції АЗС",
                    economicGroup.getFeatures().get(0),
                    List.of(new FeatureOption("З наземними резервуарами", 1.0),
                            new FeatureOption("З підземними резервуарами", 0.5))
            ));
            choices.add(new FeatureChoice("Введіть кількість паливнороздавальних колонок на АЗС",
                    economicGroup.getFeatures().get(1),
                    IntStream.range(1, 11).mapToObj(i ->
                                    new FeatureOption(i < 10 ? Integer.toString(i) : "10+", i / 10.0))
                            .toList()
            ));
            choices.add(new FeatureChoice("Оберіть кількість підприємств поряд із АЗС, що надають додаткові послуги автомобілістам: СТО, автомийок, магазинів, закладів громадського харчування ",
                    economicGroup.getFeatures().get(2),
                    List.of(new FeatureOption("0-50м (1 або більше)", 1.0),
                            new FeatureOption("50-100м (3 або більше)", 1.0),
                            new FeatureOption("50-100м (1 або 2)", 0.7),
                            new FeatureOption("100-200м", 0.3),
                            new FeatureOption("200+м", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть відстань до магістральних водо- і газопроводів, тепломереж, мереж зв’язку або ліній електропередач",
                    economicGroup.getFeatures().get(3),
                    List.of(new FeatureOption("0-50м (1 або більше)", 1.0),
                            new FeatureOption("50-100м", 0.5),
                            new FeatureOption("100-200м", 0.2),
                            new FeatureOption("200+м", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть відстань до найближчого к АЗС небезпечного об'єкту",
                    economicGroup.getFeatures().get(4),
                    List.of(new FeatureOption("0-50м (1 або більше)", 1.0),
                            new FeatureOption("50-100м (2 або більше)", 1.0),
                            new FeatureOption("50-100м (1 об'єкт)", 0.7),
                            new FeatureOption("100+м (3 або більше)", 0.7),
                            new FeatureOption("100-200м", 0.3),
                            new FeatureOption("200+м", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть відстань до найближчої к АЗС житлової забудови",
                    economicGroup.getFeatures().get(5),
                    List.of(new FeatureOption("0-100м (щільна забудова, високоповерхівки)", 1.0),
                            new FeatureOption("0-100м (приватні будинки, нещільна забудова)", 0.7),
                            new FeatureOption("100-200м", 0.3),
                            new FeatureOption("200+м", 0.0))
            ));

            choices.add(new FeatureChoice("Оберіть щільність населення в районі поблизу АЗС",
                    socialGroup.getFeatures().get(0),
                    List.of(new FeatureOption("Висока", 1.0),
                            new FeatureOption("Середня", 0.7),
                            new FeatureOption("Низька", 0.3),
                            new FeatureOption("Дуже низька", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть характер зони, в якій перебуває АЗС",
                    socialGroup.getFeatures().get(1),
                    List.of(new FeatureOption("Житлова або рекреаційна зона", 1.0),
                            new FeatureOption("Промислова зона", 0.7),
                            new FeatureOption("Сільськогосподарська", 0.3),
                            new FeatureOption("Маловикористовувані землі, малонаселені", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть відстань до соціально важливої інфраструктури поблизу АЗС: стадіони, школи, лікарні і т.п.",
                    socialGroup.getFeatures().get(2),
                    List.of(new FeatureOption("0-50м (1 або більше)", 1.0),
                            new FeatureOption("50-100м (2 або більше)", 1.0),
                            new FeatureOption("50-100м (1 об'єкт)", 0.7),
                            new FeatureOption("100+м (3 або більше)", 0.7),
                            new FeatureOption("100-200м", 0.3),
                            new FeatureOption("200+м", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть, чи знаходжиться АЗС в зоні бойових дій або чи близька вона до цієї зони",
                    socialGroup.getFeatures().get(3),
                    List.of(new FeatureOption("В межах активних бойових дій", 1.0),
                            new FeatureOption("Прифронтові зони та регіони", 0.7),
                            new FeatureOption("За межами прифронтових зон, але в країні відбуваються військові дії", 0.3),
                            new FeatureOption("В країні немає військових дій", 0.0))
            ));
            choices.add(new FeatureChoice("Оберість тип АЗС",
                    socialGroup.getFeatures().get(4),
                    List.of(new FeatureOption("Мала, приватна АЗС або така, що належить до маловідомої торговельної мережі", 0.75),
                            new FeatureOption("АЗС належить до відомої торговельної мережі", 0.3))
            ));

            choices.add(new FeatureChoice("Оберіть кількість типів використовуваного палива (не включаючи газ)",
                    environmentalGroup.getFeatures().get(0),
                    IntStream.range(0, 8).mapToObj(i ->
                                    new FeatureOption(i < 7 ? Integer.toString(i) : "7+", i / 10.0))
                            .toList()
            ));
            choices.add(new FeatureChoice("Оберіть, чи поставляється Газ на АЗС",
                    environmentalGroup.getFeatures().get(0),
                    List.of(new FeatureOption("Так", 0.3),
                            new FeatureOption("Ні", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть клімат у регіоні",
                    environmentalGroup.getFeatures().get(1),
                    List.of(new FeatureOption("Жаркий, тропічний клімат", 1.0),
                            new FeatureOption("Помірний клімат", 0.6),
                            new FeatureOption("Холодний клімат", 0.2))
            ));
            choices.add(new FeatureChoice("Оберіть відстань до значних лісових масивів біля АЗС",
                    environmentalGroup.getFeatures().get(2),
                    List.of(new FeatureOption("0-50м (1 або більше)", 1.0),
                            new FeatureOption("50-100м", 0.7),
                            new FeatureOption("100-200м", 0.3),
                            new FeatureOption("200+м", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть відстань до земель с/г значення біля АЗС",
                    environmentalGroup.getFeatures().get(3),
                    List.of(new FeatureOption("0-50м (1 або більше)", 1.0),
                            new FeatureOption("50-100м", 0.7),
                            new FeatureOption("100-200м", 0.3),
                            new FeatureOption("200+м", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть характер рельєфу біля АЗС ",
                    environmentalGroup.getFeatures().get(4),
                    List.of(new FeatureOption("АЗС знаходиться на пагорбі відносно прилеглої місцевості", 1.0),
                            new FeatureOption("АЗС на рівнинній місцевості", 0.7),
                            new FeatureOption("АЗС оточена підвищеннями з 2-3 сторін", 0.3),
                            new FeatureOption("АЗС знаходиться у пониззі, у котловані", 0.0))
            ));
            choices.add(new FeatureChoice("Оберіть відстань до рекреаційних зон поблизу",
                    environmentalGroup.getFeatures().get(5),
                    List.of(new FeatureOption("0-50м (1 або більше)", 1.0),
                            new FeatureOption("50-100м", 0.7),
                            new FeatureOption("100-200м", 0.3),
                            new FeatureOption("200+м", 0.0))
            ));

            choiceRepository.saveAll(choices);


            List<Feature> allFeatures = featureRepository.findAll();
            List<Double> wave = List.of(0.073, 0.122, 0.069, 0.069, 0.116, 0.106, 0.056, 0.024, 0.048, 0.029, 0.027, 0.061, 0.0, 0.058, 0.0, 0.07, 0.073);
            List<Double> fire = List.of(0.098, 0.125, 0.0, 0.0, 0.138, 0.103, 0.042, 0.038, 0.052, 0.038, 0.042, 0.058, 0.058, 0.094, 0.055, 0.058, 0.073);
            List<Double> ball = List.of(0.082, 0.153, 0.0, 0.074, 0.109, 0.105, 0.053, 0.03, 0.055, 0.032, 0.032, 0.062, 0.056, 0.092, 0.0, 0.0, 0.065);

            List<Scenario> scenarios = new ArrayList<>(3);
            scenarios.add(new Scenario("Ударна хвиля",
                    IntStream.range(0, 17)
                            .mapToObj(i -> new FeatureWeight(allFeatures.get(i), wave.get(i)))
                            .toList()));
            scenarios.add(new Scenario("Пожежа проливу нафтопродуктів",
                    IntStream.range(0, 17)
                            .mapToObj(i -> new FeatureWeight(allFeatures.get(i), fire.get(i)))
                            .toList()));
            scenarios.add(new Scenario("\"Вогняна куля\"",
                    IntStream.range(0, 17)
                            .mapToObj(i -> new FeatureWeight(allFeatures.get(i), ball.get(i)))
                            .toList()));

            scenarioRepository.saveAll(scenarios);

        };
    }
}

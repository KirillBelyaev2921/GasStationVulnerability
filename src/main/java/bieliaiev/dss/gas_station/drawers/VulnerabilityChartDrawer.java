package bieliaiev.dss.gas_station.drawers;

import bieliaiev.dss.gas_station.model.interpretation.Interpretation;
import bieliaiev.dss.gas_station.model.interpretation.MemberFunction;
import bieliaiev.dss.gas_station.service.MemberFunctionService;
import lombok.AllArgsConstructor;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.springframework.stereotype.Component;

import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.stream.IntStream;

@AllArgsConstructor
@Component
public class VulnerabilityChartDrawer {

    private final MemberFunctionService service;

    public String sendImage(Interpretation interpretation) throws IOException {
        XYDataset dataset = this.createDataset();
        JFreeChart result = ChartFactory.createXYLineChart("", "Оцінка вразливості", "Ступінь вразливості, %", dataset, PlotOrientation.VERTICAL, true, true, true);
        XYPlot plot = result.getXYPlot();
        result.setBackgroundPaint(Color.LIGHT_GRAY);
        plot.setBackgroundPaint(Color.WHITE);
        plot.setDomainZeroBaselineVisible(true);
        plot.setRangeZeroBaselineVisible(true);
        plot.getDomainAxis().setLowerMargin(0.0D);
        plot.getDomainAxis().setUpperMargin(0.0D);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        plot.setDomainGridlinePaint(Color.BLACK);
        plot.setRangeGridlinePaint(Color.BLACK);

        interpretation.getCategories()
                .stream()
                .filter(c -> c.getScore() != 0)
                .forEach(i -> {
                    CircleDrawer cd = new CircleDrawer();
                    XYAnnotation bestBid = new XYDrawableAnnotation(interpretation.getScore(), i.getScore() * 100.0D, 10.0D, 10.0D, cd);
                    plot.addAnnotation(bestBid);
                });
        ByteArrayOutputStream resultBytes = new ByteArrayOutputStream();
        ChartUtilities.writeChartAsPNG(resultBytes, result, 600, 400);
        return Base64.getEncoder().encodeToString(resultBytes.toByteArray());
    }

    private XYDataset createDataset() {
        XYSeriesCollection dataset = new XYSeriesCollection();
        List<MemberFunction> memberFunctions = service.getMemberFunctions();
        List<XYSeries> xySeries =
                List.of(new XYSeries("Низька"), new XYSeries("Середня"), new XYSeries("Висока"));

        IntStream.range(0, 11)
                .mapToDouble(i -> (double) i / 10.0D)
                .forEach(d -> IntStream.range(0, memberFunctions.size())
                        .forEach(i -> xySeries.get(i).add(d, memberFunctions.get(i).getResult(d) * 100.0)));

        xySeries.forEach(dataset::addSeries);
        return dataset;
    }

}

package bieliaiev.dss.gas_station.service;

import bieliaiev.dss.gas_station.model.choice.GsFeatureData;
import bieliaiev.dss.gas_station.model.interpretation.GsCategory;
import bieliaiev.dss.gas_station.model.interpretation.Interpretation;
import bieliaiev.dss.gas_station.model.weight.FeatureWeight;
import bieliaiev.dss.gas_station.repository.interpretation.InterpretationRepository;
import bieliaiev.dss.gas_station.repository.interpretation.MemberFunctionRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@AllArgsConstructor
@Service
public class InterpretationService {

    private final InterpretationRepository interpretationRepository;
    private final MemberFunctionRepository functionRepository;

    public Interpretation getInterpretation(double vulnerability) {
        Interpretation interpretation = new Interpretation();
        interpretation.setCategories(
                functionRepository.findAll().stream()
                        .map(f -> new GsCategory(interpretation, f, f.getResult(vulnerability)))
                        .toList());
        return interpretation;
    }

    public double findVulnerabilityScore(Map<String, GsFeatureData> data,
                                         List<Map<String, FeatureWeight>> weights) {
        return weights.stream()
                .mapToDouble(weightList ->
                        weightList.keySet().stream()
                                .mapToDouble(k -> data.get(k).getScore() * weightList.get(k).getWeight())
                                .sum())
                .average().orElseThrow();
    }


}

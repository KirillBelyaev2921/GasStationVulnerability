package bieliaiev.dss.gas_station.model;

import bieliaiev.dss.gas_station.model.choice.GsFeatureData;
import bieliaiev.dss.gas_station.model.interpretation.Interpretation;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.proxy.HibernateProxy;

import java.util.List;
import java.util.Map;
import java.util.Objects;

import static java.util.stream.Collectors.*;

@Getter
@Setter
@ToString(exclude = "dataList")
@RequiredArgsConstructor
@Entity
public class GasStation {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Double latitude;
    private Double longitude;

    @OneToMany
    @JoinColumn(name = "gas_station_id")
    private List<GsFeatureData> dataList;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "interpretation_id")
    private Interpretation interpretation;

    @Override
    public final boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        Class<?> oEffectiveClass = o instanceof HibernateProxy ? ((HibernateProxy) o).getHibernateLazyInitializer().getPersistentClass() : o.getClass();
        Class<?> thisEffectiveClass = this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass() : this.getClass();
        if (thisEffectiveClass != oEffectiveClass) return false;
        GasStation that = (GasStation) o;
        return getId() != null && Objects.equals(getId(), that.getId());
    }

    @Override
    public final int hashCode() {
        return this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass().hashCode() : getClass().hashCode();
    }

    public Map<String, Double> getScoreMap() {
        return dataList.stream()
                .collect(groupingBy(data -> data.getFeature().getCode(),
                        summingDouble(GsFeatureData::getScore)));
    }
}
